---
description: Project specifications and technical overview for Patrivio
globs:
alwaysApply: false
---

Patrivio - Project Details

## Overview

Patrivio is a privacy-focused portfolio inteligence and net worth tracking app. Users can track assets, liabilities, and net worth over time, with multi-currency support and clear visualizations. The app is designed for personal use, with future extensibility in mind, includive AI for portfolio advisory.

## Tech Stack

- **Framework:** Next.js 15 (App Router)
- **Language:** TypeScript (strict mode)
- **Database:** Supabase (Postgres, Auth)
- **Styling:** Tailwind CSS
- **Deployment:** Vercel

## Core Principles

- **Privacy:** No third-party data sharing or scraping.
- **Simplicity:** Minimal, modular UI. Logic and calculations are prioritized over design.
- **Extensible:** Codebase and data model are designed for future features and scaling.

## Key Features

- Track net worth over time with interactive charts
- Multi-currency support with daily exchange rates
- Manual entry and editing of assets.
- Asset categories: Cash, Investments, Crypto, Real Estate, Metals, Luxury, etc.
- Secure authentication and user profiles
- Modular, type-safe codebase

## Data Model (Simplified)

- **Holdings:** Assets and liabilities, grouped by category and currency
- **Records:** Value and quantity updates
- **Valuations:** Historical price/quantity snapshots for accurate net worth history
- **Exchange Rates:** Daily rates for currency conversion

## Development Guidelines

- Follow `global-rules.mdc` for architecture, code style, and file structure.
- Prioritize server components and functional programming patterns.
- Use Zod for data validation.
- Store all dates in UTC and all monetary values as numbers (format only for display).
- Use ISO currency codes (USD, EUR, etc.) throughout.

## Not in Scope (MVP)

- No automatic bank or brokerage integrations
- No expense tracking or budgeting features
- No real-time data feeds (periodic refreshes only)

## For More Details

- See `README.md` for setup and utility function cheatsheets.
- See `global-rules.mdc` for code conventions and architecture.
