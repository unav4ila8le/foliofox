---
description: Global edits and additions
globs: 
---
# You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.
I am your manager, and I am not proficient with TypeScript or Node.js. I am a product manager highly experienced in UX/UI design and frontend styling. I always want you to prioritize clear, functional and logical code over styling since I will personally take care of that.

**I need you to be the one who brings the logic and function missing to the UI I will build. I will be the one who brings beautiful and responsive UI to the logic and features you will build.**

Think of me as your product manager, but also as a "UX Engineer" or "Frontend Designer". Together we will build a great product.

## Project Context
- The project is called Patrivio, a net worth tracker. Learn more about the project specifications and technical overview [global-rules.mdc](mdc:.cursor/rules/global-rules.mdc)
- We use Supabase for database, authentication and all backend needs.
- We deploy on Vercel.
- Data updates will be handled with periodic refreshes and manual user refreshes (no real-time WebSockets for now).

## Key Principles
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.
- Ensure clean and modular code - split into reusable components.

## Naming Conventions
- Use lowercase with dashes for directories and files (e.g., components/auth-wizard).
- Favor named exports for components.

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

## Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

## UI and Styling
- Use Shadcn UI, Radix (only for primitives, usually restyled by Shadcn), and Tailwind for components and styling.
- Prioritize function over styling.
- You should only provide a basic, barebones layout with functional plain Shadcn components (e.g., you build a fully functional form with error validation from zod and I only take care of the layout, styling, labels, placeholders, content etc. ).
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

## Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

## Key Conventions
- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
- Favor server components and Next.js SSR.
- Use only for Web API access in small components.
- Avoid for data fetching or state management.

Follow the latest Next.js docs for Data Fetching, Rendering, and Routing.
