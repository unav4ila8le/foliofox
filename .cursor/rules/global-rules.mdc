---
description: Global edits and additions
globs:
alwaysApply: true
---

# Patrivio - Global Development Rules

## Project Context

- Next.js 15 App Router application for net worth tracking
- Stack: TypeScript, Supabase, Shadcn UI, Tailwind CSS
- Deployment: Vercel
- Data Strategy: Periodic refreshes and manual updates (no WebSocket)

## Development Principles

1. **Architecture**
   - Favor React Server Components (RSC) over Client Components
   - Use 'nuqs' for URL state management
   - Minimize 'use client' directives - only for Web API/browser features
   - Split complex features into modular components

2. **TypeScript & Code Style**
   - Use TypeScript for all code with strict type checking
   - Prefer interfaces for component props and public APIs
   - Use types for utility, mapped, or database types (e.g., generated types, unions)
   - Use descriptive names with auxiliary verbs (isLoading, hasError)
   - Follow functional programming patterns
   - Avoid unnecessary class usage
   - Prefer maps or objects over enums

3. **File Structure**

   ```
   components/
     ├── ui/          # Shadcn components (do not modify)
     └── feature/     # Feature-specific components
   app/
     └── (routes)/    # Next.js App Router pages
   lib/              # Core utilities and configurations
   types/            # TypeScript interfaces and types
   hooks/            # React hooks
   utils/            # Helper functions
   ```

4. **Import Order**

   ```typescript
   // 1. External Dependencies
   import { type FC } from "react";
   import { createClient } from "@supabase/supabase-js";

   // 2. UI Components
   import { Button } from "@/components/ui/button";

   // 3. Custom Components
   import { LoginForm } from "@/components/auth/login-form";

   // 4. Internal Modules
   import { useSignout } from "@/hooks/use-signout";

   // 5. Local Files and Types
   import type { Holding } from "@/types/global.types";
   ```

5. **Component Structure**

   ```typescript
   // Types and interfaces first
   interface Props {
     // ...
   }

   // Component with explicit return type
   export function ComponentName({ prop1, prop2 }: Props): JSX.Element {
     // 1. Hooks
     // 2. Derived state
     // 3. Event handlers
     // 4. Render
   }
   ```

   - Use named exports for components, except for Next.js route files, which require default exports.

6. **Currency & Data Handling**
   - We mostly use ISO currency codes (USD, EUR) - unless explicitly requested
   - Store all dates in UTC
   - Handle all monetary values as numbers, format only for display
   - Use Zod for data validation

7. **Performance**
   - Implement Suspense boundaries for loading states
   - Use dynamic imports for heavy components
   - Optimize images with next/image
   - Monitor and optimize Core Web Vitals

8. **File Naming**
   - Use kebab-case for files and directories
   - Suffix test files with .test.ts
   - Group related components in feature directories

## Role Context

- You (AI): Senior TypeScript/React engineer focusing on logic and functionality
- User: UX/UI expert handling design and styling
- Collaboration: You build functional components, user enhances UI/UX
